//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_LightWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Light), typeof(UnityEngine.Behaviour));
		L.RegFunction("Reset", new LuaCSFunction(Reset));
		L.RegFunction("AddCommandBuffer", new LuaCSFunction(AddCommandBuffer));
		L.RegFunction("AddCommandBufferAsync", new LuaCSFunction(AddCommandBufferAsync));
		L.RegFunction("RemoveCommandBuffer", new LuaCSFunction(RemoveCommandBuffer));
		L.RegFunction("RemoveCommandBuffers", new LuaCSFunction(RemoveCommandBuffers));
		L.RegFunction("RemoveAllCommandBuffers", new LuaCSFunction(RemoveAllCommandBuffers));
		L.RegFunction("GetCommandBuffers", new LuaCSFunction(GetCommandBuffers));
		L.RegFunction("GetLights", new LuaCSFunction(GetLights));
		L.RegFunction("New", new LuaCSFunction(_CreateUnityEngine_Light));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("type", new LuaCSFunction(get_type), new LuaCSFunction(set_type));
		L.RegVar("shape", new LuaCSFunction(get_shape), new LuaCSFunction(set_shape));
		L.RegVar("spotAngle", new LuaCSFunction(get_spotAngle), new LuaCSFunction(set_spotAngle));
		L.RegVar("innerSpotAngle", new LuaCSFunction(get_innerSpotAngle), new LuaCSFunction(set_innerSpotAngle));
		L.RegVar("color", new LuaCSFunction(get_color), new LuaCSFunction(set_color));
		L.RegVar("colorTemperature", new LuaCSFunction(get_colorTemperature), new LuaCSFunction(set_colorTemperature));
		L.RegVar("useColorTemperature", new LuaCSFunction(get_useColorTemperature), new LuaCSFunction(set_useColorTemperature));
		L.RegVar("intensity", new LuaCSFunction(get_intensity), new LuaCSFunction(set_intensity));
		L.RegVar("bounceIntensity", new LuaCSFunction(get_bounceIntensity), new LuaCSFunction(set_bounceIntensity));
		L.RegVar("useBoundingSphereOverride", new LuaCSFunction(get_useBoundingSphereOverride), new LuaCSFunction(set_useBoundingSphereOverride));
		L.RegVar("boundingSphereOverride", new LuaCSFunction(get_boundingSphereOverride), new LuaCSFunction(set_boundingSphereOverride));
		L.RegVar("useViewFrustumForShadowCasterCull", new LuaCSFunction(get_useViewFrustumForShadowCasterCull), new LuaCSFunction(set_useViewFrustumForShadowCasterCull));
		L.RegVar("shadowCustomResolution", new LuaCSFunction(get_shadowCustomResolution), new LuaCSFunction(set_shadowCustomResolution));
		L.RegVar("shadowBias", new LuaCSFunction(get_shadowBias), new LuaCSFunction(set_shadowBias));
		L.RegVar("shadowNormalBias", new LuaCSFunction(get_shadowNormalBias), new LuaCSFunction(set_shadowNormalBias));
		L.RegVar("shadowNearPlane", new LuaCSFunction(get_shadowNearPlane), new LuaCSFunction(set_shadowNearPlane));
		L.RegVar("useShadowMatrixOverride", new LuaCSFunction(get_useShadowMatrixOverride), new LuaCSFunction(set_useShadowMatrixOverride));
		L.RegVar("shadowMatrixOverride", new LuaCSFunction(get_shadowMatrixOverride), new LuaCSFunction(set_shadowMatrixOverride));
		L.RegVar("range", new LuaCSFunction(get_range), new LuaCSFunction(set_range));
		L.RegVar("flare", new LuaCSFunction(get_flare), new LuaCSFunction(set_flare));
		L.RegVar("bakingOutput", new LuaCSFunction(get_bakingOutput), new LuaCSFunction(set_bakingOutput));
		L.RegVar("cullingMask", new LuaCSFunction(get_cullingMask), new LuaCSFunction(set_cullingMask));
		L.RegVar("renderingLayerMask", new LuaCSFunction(get_renderingLayerMask), new LuaCSFunction(set_renderingLayerMask));
		L.RegVar("lightShadowCasterMode", new LuaCSFunction(get_lightShadowCasterMode), new LuaCSFunction(set_lightShadowCasterMode));
		L.RegVar("shadows", new LuaCSFunction(get_shadows), new LuaCSFunction(set_shadows));
		L.RegVar("shadowStrength", new LuaCSFunction(get_shadowStrength), new LuaCSFunction(set_shadowStrength));
		L.RegVar("shadowResolution", new LuaCSFunction(get_shadowResolution), new LuaCSFunction(set_shadowResolution));
		L.RegVar("layerShadowCullDistances", new LuaCSFunction(get_layerShadowCullDistances), new LuaCSFunction(set_layerShadowCullDistances));
		L.RegVar("cookieSize", new LuaCSFunction(get_cookieSize), new LuaCSFunction(set_cookieSize));
		L.RegVar("cookie", new LuaCSFunction(get_cookie), new LuaCSFunction(set_cookie));
		L.RegVar("renderMode", new LuaCSFunction(get_renderMode), new LuaCSFunction(set_renderMode));
		L.RegVar("commandBufferCount", new LuaCSFunction(get_commandBufferCount), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Light(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Light obj = new UnityEngine.Light();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Light.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCommandBuffer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
				UnityEngine.Rendering.LightEvent arg0 = StackTraits<UnityEngine.Rendering.LightEvent>.Check(L, 2);
				UnityEngine.Rendering.CommandBuffer arg1 = ToLua.CheckObject<UnityEngine.Rendering.CommandBuffer>(L, 3);
				obj.AddCommandBuffer(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
				UnityEngine.Rendering.LightEvent arg0 = StackTraits<UnityEngine.Rendering.LightEvent>.Check(L, 2);
				UnityEngine.Rendering.CommandBuffer arg1 = ToLua.CheckObject<UnityEngine.Rendering.CommandBuffer>(L, 3);
				UnityEngine.Rendering.ShadowMapPass arg2 = StackTraits<UnityEngine.Rendering.ShadowMapPass>.Check(L, 4);
				obj.AddCommandBuffer(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Light.AddCommandBuffer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCommandBufferAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
				UnityEngine.Rendering.LightEvent arg0 = StackTraits<UnityEngine.Rendering.LightEvent>.Check(L, 2);
				UnityEngine.Rendering.CommandBuffer arg1 = ToLua.CheckObject<UnityEngine.Rendering.CommandBuffer>(L, 3);
				UnityEngine.Rendering.ComputeQueueType arg2 = StackTraits<UnityEngine.Rendering.ComputeQueueType>.Check(L, 4);
				obj.AddCommandBufferAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
				UnityEngine.Rendering.LightEvent arg0 = StackTraits<UnityEngine.Rendering.LightEvent>.Check(L, 2);
				UnityEngine.Rendering.CommandBuffer arg1 = ToLua.CheckObject<UnityEngine.Rendering.CommandBuffer>(L, 3);
				UnityEngine.Rendering.ShadowMapPass arg2 = StackTraits<UnityEngine.Rendering.ShadowMapPass>.Check(L, 4);
				UnityEngine.Rendering.ComputeQueueType arg3 = StackTraits<UnityEngine.Rendering.ComputeQueueType>.Check(L, 5);
				obj.AddCommandBufferAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Light.AddCommandBufferAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCommandBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
			UnityEngine.Rendering.LightEvent arg0 = StackTraits<UnityEngine.Rendering.LightEvent>.Check(L, 2);
			UnityEngine.Rendering.CommandBuffer arg1 = ToLua.CheckObject<UnityEngine.Rendering.CommandBuffer>(L, 3);
			obj.RemoveCommandBuffer(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCommandBuffers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
			UnityEngine.Rendering.LightEvent arg0 = StackTraits<UnityEngine.Rendering.LightEvent>.Check(L, 2);
			obj.RemoveCommandBuffers(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllCommandBuffers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
			obj.RemoveAllCommandBuffers();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCommandBuffers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Light obj = ToLua.CheckObject<UnityEngine.Light>(L, 1);
			UnityEngine.Rendering.LightEvent arg0 = StackTraits<UnityEngine.Rendering.LightEvent>.Check(L, 2);
			UnityEngine.Rendering.CommandBuffer[] o = obj.GetCommandBuffers(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLights(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.LightType arg0 = StackTraits<UnityEngine.LightType>.Check(L, 1);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
			UnityEngine.Light[] o = UnityEngine.Light.GetLights(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightType ret = obj.type;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shape(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightShape ret = obj.shape;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shape on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spotAngle(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.spotAngle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index spotAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_innerSpotAngle(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.innerSpotAngle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index innerSpotAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colorTemperature(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.colorTemperature;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index colorTemperature on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useColorTemperature(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool ret = obj.useColorTemperature;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useColorTemperature on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_intensity(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.intensity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index intensity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bounceIntensity(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.bounceIntensity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index bounceIntensity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useBoundingSphereOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool ret = obj.useBoundingSphereOverride;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useBoundingSphereOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_boundingSphereOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Vector4 ret = obj.boundingSphereOverride;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index boundingSphereOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useViewFrustumForShadowCasterCull(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool ret = obj.useViewFrustumForShadowCasterCull;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useViewFrustumForShadowCasterCull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadowCustomResolution(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			int ret = obj.shadowCustomResolution;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowCustomResolution on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadowBias(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.shadowBias;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadowNormalBias(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.shadowNormalBias;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowNormalBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadowNearPlane(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.shadowNearPlane;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowNearPlane on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useShadowMatrixOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool ret = obj.useShadowMatrixOverride;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useShadowMatrixOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadowMatrixOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Matrix4x4 ret = obj.shadowMatrixOverride;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowMatrixOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_range(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.range;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index range on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_flare(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Flare ret = obj.flare;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index flare on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bakingOutput(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput ret = obj.bakingOutput;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index bakingOutput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cullingMask(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			int ret = obj.cullingMask;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index cullingMask on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_renderingLayerMask(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			int ret = obj.renderingLayerMask;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index renderingLayerMask on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lightShadowCasterMode(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightShadowCasterMode ret = obj.lightShadowCasterMode;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index lightShadowCasterMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadows(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightShadows ret = obj.shadows;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadows on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadowStrength(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.shadowStrength;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowStrength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shadowResolution(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Rendering.LightShadowResolution ret = obj.shadowResolution;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowResolution on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layerShadowCullDistances(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float[] ret = obj.layerShadowCullDistances;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index layerShadowCullDistances on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cookieSize(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float ret = obj.cookieSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index cookieSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cookie(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Texture ret = obj.cookie;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index cookie on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_renderMode(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightRenderMode ret = obj.renderMode;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index renderMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_commandBufferCount(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			int ret = obj.commandBufferCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index commandBufferCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightType arg0 = StackTraits<UnityEngine.LightType>.Check(L, 2);
			obj.type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shape(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightShape arg0 = StackTraits<UnityEngine.LightShape>.Check(L, 2);
			obj.shape = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shape on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spotAngle(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.spotAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index spotAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_innerSpotAngle(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.innerSpotAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index innerSpotAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_colorTemperature(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.colorTemperature = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index colorTemperature on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useColorTemperature(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useColorTemperature = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useColorTemperature on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_intensity(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.intensity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index intensity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bounceIntensity(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.bounceIntensity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index bounceIntensity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useBoundingSphereOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useBoundingSphereOverride = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useBoundingSphereOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_boundingSphereOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Vector4 arg0 = ToLua.ToVector4(L, 2);
			obj.boundingSphereOverride = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index boundingSphereOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useViewFrustumForShadowCasterCull(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useViewFrustumForShadowCasterCull = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useViewFrustumForShadowCasterCull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadowCustomResolution(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.shadowCustomResolution = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowCustomResolution on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadowBias(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.shadowBias = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadowNormalBias(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.shadowNormalBias = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowNormalBias on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadowNearPlane(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.shadowNearPlane = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowNearPlane on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useShadowMatrixOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useShadowMatrixOverride = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index useShadowMatrixOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadowMatrixOverride(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 2);
			obj.shadowMatrixOverride = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowMatrixOverride on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_range(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.range = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index range on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_flare(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Flare arg0 = ToLua.CheckObject<UnityEngine.Flare>(L, 2);
			obj.flare = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index flare on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bakingOutput(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput arg0 = StackTraits<UnityEngine.LightBakingOutput>.Check(L, 2);
			obj.bakingOutput = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index bakingOutput on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cullingMask(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.cullingMask = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index cullingMask on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_renderingLayerMask(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.renderingLayerMask = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index renderingLayerMask on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lightShadowCasterMode(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightShadowCasterMode arg0 = StackTraits<UnityEngine.LightShadowCasterMode>.Check(L, 2);
			obj.lightShadowCasterMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index lightShadowCasterMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadows(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightShadows arg0 = StackTraits<UnityEngine.LightShadows>.Check(L, 2);
			obj.shadows = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadows on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadowStrength(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.shadowStrength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowStrength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shadowResolution(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Rendering.LightShadowResolution arg0 = StackTraits<UnityEngine.Rendering.LightShadowResolution>.Check(L, 2);
			obj.shadowResolution = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index shadowResolution on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_layerShadowCullDistances(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 2);
			obj.layerShadowCullDistances = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index layerShadowCullDistances on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cookieSize(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.cookieSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index cookieSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cookie(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.Texture arg0 = ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.cookie = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index cookie on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_renderMode(IntPtr L)
	{
		UnityEngine.Light obj = null;
		try
		{
			obj = (UnityEngine.Light)ToLua.ToObject(L, 1);
			UnityEngine.LightRenderMode arg0 = StackTraits<UnityEngine.LightRenderMode>.Check(L, 2);
			obj.renderMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, obj, "attempt to index renderMode on a nil value");
		}
	}
}

