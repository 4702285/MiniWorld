//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaInterface_InjectTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(LuaInterface.InjectType));
		L.RegVar("None", new LuaCSFunction(get_None), null);
		L.RegVar("After", new LuaCSFunction(get_After), null);
		L.RegVar("Before", new LuaCSFunction(get_Before), null);
		L.RegVar("Replace", new LuaCSFunction(get_Replace), null);
		L.RegVar("ReplaceWithPreInvokeBase", new LuaCSFunction(get_ReplaceWithPreInvokeBase), null);
		L.RegVar("ReplaceWithPostInvokeBase", new LuaCSFunction(get_ReplaceWithPostInvokeBase), null);
		L.RegFunction("ToInt", new LuaCSFunction(EnumTrait<LuaInterface.InjectType>.ToInt));
		L.RegFunction("IntToEnum", new LuaCSFunction(EnumTrait<LuaInterface.InjectType>.IntToEnum));
		L.RegFunction("CompareTo", new LuaCSFunction(EnumTrait<LuaInterface.InjectType>.CompareTo));
		L.RegFunction("ToString", new LuaCSFunction(EnumTrait<LuaInterface.InjectType>.ToString));
#if !LUAC_5_3
		L.RegEnumEqualFunction("__eq");
#endif
		L.RegFunction("Equals", new LuaCSFunction(EnumTrait<LuaInterface.InjectType>.Equals));
		L.RegFunction("__tostring", new LuaCSFunction(EnumTrait<LuaInterface.InjectType>.ToString));
		L.EndEnum();
		TypeTraits<LuaInterface.InjectType>.Check = EnumTrait<LuaInterface.InjectType>.CheckType;
		StackTraits<LuaInterface.InjectType>.Push = ToLua.PushData<LuaInterface.InjectType>;
		EnumTrait<LuaInterface.InjectType>.IntToEnumTransfer = (i) => (LuaInterface.InjectType)i;
		EnumTrait<LuaInterface.InjectType>.EnumToInt = (e) => (int)e;
	}


	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.PushData(L, LuaInterface.InjectType.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_After(IntPtr L)
	{
		ToLua.PushData(L, LuaInterface.InjectType.After);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Before(IntPtr L)
	{
		ToLua.PushData(L, LuaInterface.InjectType.Before);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Replace(IntPtr L)
	{
		ToLua.PushData(L, LuaInterface.InjectType.Replace);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReplaceWithPreInvokeBase(IntPtr L)
	{
		ToLua.PushData(L, LuaInterface.InjectType.ReplaceWithPreInvokeBase);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReplaceWithPostInvokeBase(IntPtr L)
	{
		ToLua.PushData(L, LuaInterface.InjectType.ReplaceWithPostInvokeBase);
		return 1;
	}
}

